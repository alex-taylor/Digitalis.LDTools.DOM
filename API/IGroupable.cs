#region License

//
// IGroupable.cs
//
// Copyright (C) 2009-2013 Alex Taylor.  All Rights Reserved.
//
// This file is part of Digitalis.LDTools.DOM.dll
//
// Digitalis.LDTools.DOM.dll is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Digitalis.LDTools.DOM.dll is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Digitalis.LDTools.DOM.dll.  If not, see <http://www.gnu.org/licenses/>.
//

#endregion License

namespace Digitalis.LDTools.DOM.API
{
    #region Usings

    using System;

    using Digitalis.UndoSystem;

    #endregion Usings

    /// <summary>
    /// Represents an <see cref="IElement"/> which may be attached to an <see cref="IGroup"/>.
    /// </summary>
    /// <remarks>
    ///
    /// <h3>Code-generation</h3>
    /// If <see cref="Group"/> is not <c>null</c> and <i>codeFormat</i> is <see cref="CodeStandards.Full"/> or
    /// <see cref="CodeStandards.OfficialModelRepository"/>, <see cref="IDOMObject.ToCode">ToCode()</see> will prefix each line
    /// of LDraw code generated by the <b>IGroupable</b> with the <i>MLCAD BTG</i> meta-command.
    ///
    /// <h3>Disposal</h3>
    /// <see cref="System.IDisposable.Dispose">Disposing</see> of an <b>IGroupable</b> will automatically remove it from its
    /// <see cref="Group"/>. If the <see cref="Group"/> is <see cref="IDOMObject.IsImmutable">immutable</see>,
    /// <see cref="System.Collections.Generic.ICollection{T}.IsReadOnly">read-only</see> or
    /// <see cref="IPageElement.IsLocked">locked</see>, <see cref="System.IDisposable.Dispose">Dispose()</see> will throw the
    /// appropriate exception and the disposal will not take place.
    ///
    /// <h3>Self-description</h3>
    /// <b>IGroupable</b> returns the following values:
    /// <p/>
    /// <list type="table">
    ///     <listheader><term>Property</term><description>Value</description></listheader>
    ///     <item><term><see cref="IDOMObject.ObjectType"/></term><description>Implementation-specific</description></item>
    ///     <item><term><see cref="IDOMObject.IsImmutable"/></term><description>Implementation-specific</description></item>
    ///     <item><term><see cref="IDocumentElement.Icon"/></term><description>Implementation-specific</description></item>
    ///     <item><term><see cref="IDocumentElement.TypeName"/></term><description>Implementation-specific</description></item>
    ///     <item><term><see cref="IDocumentElement.Description"/></term><description>Implementation-specific</description></item>
    ///     <item><term><see cref="IDocumentElement.ExtendedDescription"/></term><description>Implementation-specific</description></item>
    ///     <item><term><see cref="IElement.IsStateElement"/></term><description>Implementation-specific</description></item>
    ///     <item><term><see cref="IElement.IsTopLevelElement"/></term><description>Implementation-specific</description></item>
    /// </list>
    ///
    /// </remarks>
    public interface IGroupable : IElement
    {
        #region Grouping

        /// <summary>
        /// Gets a value indicating whether the <see cref="IGroupable"/> may be added to an <see cref="IGroup"/>.
        /// </summary>
        /// <remarks>
        /// An <see cref="IGroupable"/> may be added to an <see cref="IGroup"/> if:
        /// <p/>
        /// <list type="bullet">
        ///     <item><term>It is not <see cref="IDOMObject.IsFrozen">frozen</see></term></item>
        ///     <item><term>It is a direct child of an <see cref="IStep"/></term></item>
        ///     <item><term>It is not already attached to an <see cref="IGroup"/></term></item>
        ///     <item>
        ///         <term>
        ///             It is a descendant of the same <see cref="IPage"/> or <see cref="IStep"/> as the <see cref="IGroup"/>
        ///         </term>
        ///     </item>
        /// </list>
        /// <p/>
        /// The <see cref="IGroup"/> and subtypes of <see cref="IGroupable"/> may add further restrictions.
        /// </remarks>
        bool IsGroupable { get; }

        /// <summary>
        /// Gets or sets the <see cref="IGroup"/> the <see cref="IGroupable"/> is attached to.
        /// </summary>
        /// <exception cref="System.ObjectDisposedException">The <see cref="IGroupable"/> is
        ///     <see cref="IDOMObject.IsDisposed">disposed</see>.</exception>
        /// <exception cref="ObjectFrozenException">The property is set and either the <see cref="IGroupable"/> or
        ///     <see cref="IGroup"/> is <see cref="IDOMObject.IsFrozen">frozen</see>.</exception>
        /// <exception cref="System.NotSupportedException">The property is set and the <see cref="IGroup"/> is
        ///     <see cref="IDOMObject.IsImmutable">immutable</see> or
        ///     <see cref="System.Collections.Generic.ICollection{T}.IsReadOnly">read-only</see>.</exception>
        /// <exception cref="ElementLockedException">The property is set and the <see cref="IGroup"/> is
        ///     <see cref="IPageElement.IsLocked">locked</see>.</exception>
        /// <exception cref="System.InvalidOperationException">The property is set and the <see cref="IGroupable"/> cannot be
        ///     attached to the <see cref="IGroup"/> for <see cref="IsGroupable">some other reason</see>.</exception>
        /// <remarks>
        /// <see cref="IGroupable"/>s may be 'grouped' together by attaching them to an <see cref="IGroup"/>; both groupable and
        /// group must be descendants of the same <see cref="IPage"/> or <see cref="IStep"/>, and a groupable may not be attached
        /// to more than one group at a time. The <see cref="IGroupable"/> remains a child of its <see cref="IElement.Parent"/>
        /// - its group membership is simply an attribute, which will be cleared automatically if the groupable or the
        /// <see cref="IGroup"/> is removed from the document-tree.
        /// <p/>
        /// Setting this property is equivalent to calling <see cref="System.Collections.Generic.ICollection{T}.Add">Add()</see>
        /// or <see cref="System.Collections.Generic.ICollection{T}.Remove">Remove()</see> on the supplied <see cref="IGroup"/>
        /// and passing in the <see cref="IGroupable"/>.
        /// <p/>
        /// It is possible to set this property if the <see cref="IGroupable"/> is
        /// <see cref="IPageElement.IsLocked">locked</see> or <see cref="IDOMObject.IsImmutable">immutable</see>, but not if it
        /// is <see cref="IDOMObject.IsFrozen">frozen</see>.
        /// <p/>
        /// If the <see cref="IGroupable"/> is <see cref="IDOMObject.Clone">cloned</see> or serialized, the value of this
        /// property will only be preserved if the <see cref="IGroup"/> is included in the same operation.
        /// <p/>
        /// <see cref="System.IDisposable.Dispose">Disposing</see> of an <see cref="IGroupable"/> will automatically remove it
        /// from its <b>Group</b>. If the <b>Group</b> is <see cref="IDOMObject.IsImmutable">immutable</see>,
        /// <see cref="System.Collections.Generic.ICollection{T}.IsReadOnly">read-only</see> or
        /// <see cref="IPageElement.IsLocked">locked</see>, <see cref="System.IDisposable.Dispose">Dispose()</see> will throw
        /// the appropriate exception and the disposal will not take place.
        /// <p/>
        /// Raises the <see cref="GroupChanged"/> event when its value changes.
        /// <p/>
        /// Default value is <c>null</c>.
        /// </remarks>
        IGroup Group { get; set; }

        /// <summary>
        /// Occurs when <see cref="Group"/> changes.
        /// </summary>
        event PropertyChangedEventHandler<IGroup> GroupChanged;

        #endregion Grouping
    }
}
